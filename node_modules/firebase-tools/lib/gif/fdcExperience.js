"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateOperation = exports.chatWithFirebase = exports.generateSchema = void 0;
const apiv2_1 = require("../apiv2");
const api_1 = require("../api");
const apiClient = new apiv2_1.Client({ urlPrefix: (0, api_1.cloudCompanionOrigin)(), auth: true });
const schemaGeneratorExperience = "/appeco/firebase/fdc-schema-generator";
const geminiInFirebaseChatExperience = "/appeco/firebase/firebase-chat/free";
const operationGeneratorExperience = "/appeco/firebase/fdc-query-generator";
async function generateSchema(prompt, project) {
    const res = await apiClient.post(`/v1beta/projects/${project}/locations/global/instances/default:completeTask`, {
        input: { messages: [{ content: prompt, author: "USER" }] },
        experienceContext: {
            experience: schemaGeneratorExperience,
        },
    });
    return res.body.output.messages[0].content;
}
exports.generateSchema = generateSchema;
async function chatWithFirebase(prompt, project) {
    const res = await apiClient.post(`/v1beta/projects/${project}/locations/global/instances/default:completeTask`, {
        input: { messages: [{ content: prompt, author: "USER" }] },
        experienceContext: {
            experience: geminiInFirebaseChatExperience,
        },
    });
    return res.body;
}
exports.chatWithFirebase = chatWithFirebase;
async function generateOperation(prompt, service, project) {
    const res = await apiClient.post(`/v1beta/projects/${project}/locations/global/instances/default:completeTask`, {
        input: { messages: [{ content: prompt, author: "USER" }] },
        experienceContext: {
            experience: operationGeneratorExperience,
        },
        clientContext: {
            additionalContext: {
                "@type": "type.googleapis.com/google.cloud.cloudaicompanion.v1main.FirebaseChatRequestContext",
                fdcInfo: { fdcServiceName: service, requiresQuery: true },
            },
        },
    });
    return res.body.output.messages[0].content;
}
exports.generateOperation = generateOperation;
