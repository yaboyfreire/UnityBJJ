"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.delete_document = void 0;
const zod_1 = require("zod");
const tool_js_1 = require("../../tool.js");
const util_js_1 = require("../../util.js");
const firestore_js_1 = require("../../../gcp/firestore.js");
const delete_js_1 = require("../../../firestore/delete.js");
exports.delete_document = (0, tool_js_1.tool)({
    name: "delete_document",
    description: "Deletes a Firestore documents from a database in the current project by full document paths. Use this if you know the exact path of a document.",
    inputSchema: zod_1.z.object({
        path: zod_1.z
            .string()
            .describe("A document path (e.g. `collectionName/documentId` or `parentCollection/parentDocument/collectionName/documentId`)"),
    }),
    annotations: {
        title: "Delete Firestore document",
        destructiveHint: true,
    },
    _meta: {
        requiresAuth: true,
        requiresProject: true,
    },
}, async ({ path }, { projectId }) => {
    const { documents, missing } = await (0, firestore_js_1.getDocuments)(projectId, [path]);
    if (missing.length > 0 && documents && documents.length === 0) {
        return (0, util_js_1.mcpError)(`None of the specified documents were found in project '${projectId}'`);
    }
    const firestoreDelete = new delete_js_1.FirestoreDelete(projectId, path, { databaseId: "(default)" });
    await firestoreDelete.execute();
    const { documents: postDeleteDocuments, missing: postDeleteMissing } = await (0, firestore_js_1.getDocuments)(projectId, [path]);
    if (postDeleteMissing.length > 0 && postDeleteDocuments.length === 0) {
        return (0, util_js_1.toContent)(`Successfully removed document located at : ${path}`);
    }
    return (0, util_js_1.mcpError)(`Failed to remove document located at : ${path}`);
});
