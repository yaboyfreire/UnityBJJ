"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkFeatureActive = exports.commandExistsSync = exports.mcpError = exports.toContent = void 0;
const child_process_1 = require("child_process");
const js_yaml_1 = require("js-yaml");
const os_1 = require("os");
const api_1 = require("../api");
const ensureApiEnabled_1 = require("../ensureApiEnabled");
function toContent(data, options) {
    if (typeof data === "string")
        return { content: [{ type: "text", text: data }] };
    let text = "";
    const format = (options === null || options === void 0 ? void 0 : options.format) || "yaml";
    switch (format) {
        case "json":
            text = JSON.stringify(data);
            break;
        case "yaml":
            text = (0, js_yaml_1.dump)(data);
            break;
    }
    const prefix = (options === null || options === void 0 ? void 0 : options.contentPrefix) || "";
    const suffix = (options === null || options === void 0 ? void 0 : options.contentSuffix) || "";
    return {
        content: [{ type: "text", text: `${prefix}${text}${suffix}` }],
    };
}
exports.toContent = toContent;
function mcpError(message, code) {
    let errorMessage = "unknown error";
    if (message instanceof Error) {
        errorMessage = message.message;
    }
    if (typeof message === "string") {
        errorMessage = message;
    }
    return {
        isError: true,
        content: [{ type: "text", text: `Error: ${code ? `${code}: ` : ""}${errorMessage}` }],
    };
}
exports.mcpError = mcpError;
function commandExistsSync(command) {
    try {
        const isWindows = (0, os_1.platform)() === "win32";
        const commandToCheck = isWindows
            ? `where "${command}" > nul 2> nul`
            : `which "${command}" > /dev/null 2> /dev/null`;
        (0, child_process_1.execSync)(commandToCheck);
        return true;
    }
    catch (error) {
        return false;
    }
}
exports.commandExistsSync = commandExistsSync;
const SERVER_FEATURE_APIS = {
    firestore: (0, api_1.firestoreOrigin)(),
    storage: (0, api_1.storageOrigin)(),
    dataconnect: (0, api_1.dataconnectOrigin)(),
    auth: (0, api_1.authManagementOrigin)(),
    messaging: (0, api_1.messagingApiOrigin)(),
    remoteconfig: (0, api_1.remoteConfigApiOrigin)(),
    crashlytics: (0, api_1.crashlyticsApiOrigin)(),
};
async function checkFeatureActive(feature, projectId, options) {
    var _a;
    if (feature in (((_a = options === null || options === void 0 ? void 0 : options.config) === null || _a === void 0 ? void 0 : _a.data) || {}))
        return true;
    try {
        if (projectId)
            return await (0, ensureApiEnabled_1.check)(projectId, SERVER_FEATURE_APIS[feature], "", true);
    }
    catch (e) {
        return true;
    }
    return false;
}
exports.checkFeatureActive = checkFeatureActive;
