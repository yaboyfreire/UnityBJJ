"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.actuate = exports.askQuestions = exports.doSetup = void 0;
const logger_1 = require("../../../logger");
const apiEnabled = require("../../../ensureApiEnabled");
const requirePermissions_1 = require("../../../requirePermissions");
const checkDatabaseType_1 = require("../../../firestore/checkDatabaseType");
const rules = require("./rules");
const indexes = require("./indexes");
const error_1 = require("../../../error");
const clc = require("colorette");
const prompt_1 = require("../../../prompt");
async function checkProjectSetup(setup, options, info) {
    const firestoreUnusedError = new error_1.FirebaseError(`It looks like you haven't used Cloud Firestore in this project before. Go to ${clc.bold(clc.underline(`https://console.firebase.google.com/project/${setup.projectId}/firestore`))} to create your Cloud Firestore database.`, { exit: 1 });
    const isFirestoreEnabled = await apiEnabled.check(setup.projectId, "firestore.googleapis.com", "", true);
    if (!isFirestoreEnabled) {
        throw firestoreUnusedError;
    }
    info.databaseId = info.databaseId || "(default)";
    let dbType = await (0, checkDatabaseType_1.checkDatabaseType)(setup.projectId, info.databaseId);
    if (dbType === "DATABASE_DOES_NOT_EXIST") {
        info.databaseId = await selectDatabaseByPrompting();
        dbType = await (0, checkDatabaseType_1.checkDatabaseType)(setup.projectId, info.databaseId);
    }
    if (dbType !== "FIRESTORE_NATIVE") {
        logger_1.logger.debug(`firestore database_type: ${dbType}`);
        throw new error_1.FirebaseError(`It looks like this project is using Cloud Datastore or Cloud Firestore in Datastore mode. The Firebase CLI can only manage projects using Cloud Firestore in Native mode. For more information, visit https://cloud.google.com/datastore/docs/firestore-or-datastore`, { exit: 1 });
    }
    await (0, requirePermissions_1.requirePermissions)(Object.assign(Object.assign({}, options), { project: setup.projectId }));
}
function selectDatabaseByPrompting() {
    return (0, prompt_1.input)("Please input the name of the Native Firestore database you would like to use:");
}
async function doSetup(setup, config, options) {
    await askQuestions(setup, config, options);
    await actuate(setup, config);
}
exports.doSetup = doSetup;
async function askQuestions(setup, config, options) {
    const firestore = !Array.isArray(setup.config.firestore) ? setup.config.firestore : undefined;
    const info = {
        databaseId: (firestore === null || firestore === void 0 ? void 0 : firestore.database) || "",
        rulesFilename: (firestore === null || firestore === void 0 ? void 0 : firestore.rules) || "",
        rules: "",
        writeRules: true,
        indexesFilename: (firestore === null || firestore === void 0 ? void 0 : firestore.indexes) || "",
        indexes: "",
        writeIndexes: true,
    };
    if (setup.projectId) {
        await checkProjectSetup(setup, options, info);
    }
    await rules.initRules(setup, config, info);
    await indexes.initIndexes(setup, config, info);
    setup.featureInfo = setup.featureInfo || {};
    setup.featureInfo.firestore = info;
}
exports.askQuestions = askQuestions;
async function actuate(setup, config) {
    var _a;
    const info = (_a = setup.featureInfo) === null || _a === void 0 ? void 0 : _a.firestore;
    if (!info) {
        throw new error_1.FirebaseError("Firestore featureInfo is not found");
    }
    info.databaseId = info.databaseId || "(default)";
    info.rules = info.rules || rules.getDefaultRules();
    info.rulesFilename = info.rulesFilename || rules.DEFAULT_RULES_FILE;
    info.indexes = info.indexes || indexes.INDEXES_TEMPLATE;
    info.indexesFilename = info.indexesFilename || indexes.DEFAULT_INDEXES_FILE;
    setup.config.firestore = {
        database: info.databaseId,
        rules: info.rulesFilename,
        indexes: info.indexesFilename,
    };
    if (info.writeRules) {
        config.writeProjectFile(info.rulesFilename, info.rules);
    }
    if (info.writeIndexes) {
        config.writeProjectFile(info.indexesFilename, info.indexes);
    }
}
exports.actuate = actuate;
